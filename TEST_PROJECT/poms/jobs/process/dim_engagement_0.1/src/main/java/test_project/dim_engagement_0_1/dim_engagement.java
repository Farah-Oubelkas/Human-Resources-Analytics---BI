// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Big Data
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package test_project.dim_engagement_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")

/**
 * Job: dim_engagement Purpose: <br>
 * Description: <br>
 * 
 * @author user@talend.com
 * @version 7.3.1.20200219_1130
 * @status
 */
public class dim_engagement implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "dim_engagement";
	private final String projectName = "TEST_PROJECT";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					dim_engagement.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(dim_engagement.this, new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tMongoDBInput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMongoDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMongoDBOutput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMongoDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMongoDBInput_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_TEST_PROJECT_dim_engagement = new byte[0];
		static byte[] commonByteArray_TEST_PROJECT_dim_engagement = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String _id;

		public String get_id() {
			return this._id;
		}

		public Integer employee_id;

		public Integer getEmployee_id() {
			return this.employee_id;
		}

		public String department;

		public String getDepartment() {
			return this.department;
		}

		public Integer engagement;

		public Integer getEngagement() {
			return this.engagement;
		}

		public Double salary;

		public Double getSalary() {
			return this.salary;
		}

		public Integer vacation_days_taken;

		public Integer getVacation_days_taken() {
			return this.vacation_days_taken;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this._id == null) ? 0 : this._id.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row1Struct other = (row1Struct) obj;

			if (this._id == null) {
				if (other._id != null)
					return false;

			} else if (!this._id.equals(other._id))

				return false;

			return true;
		}

		public void copyDataTo(row1Struct other) {

			other._id = this._id;
			other.employee_id = this.employee_id;
			other.department = this.department;
			other.engagement = this.engagement;
			other.salary = this.salary;
			other.vacation_days_taken = this.vacation_days_taken;

		}

		public void copyKeysDataTo(row1Struct other) {

			other._id = this._id;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TEST_PROJECT_dim_engagement.length) {
					if (length < 1024 && commonByteArray_TEST_PROJECT_dim_engagement.length == 0) {
						commonByteArray_TEST_PROJECT_dim_engagement = new byte[1024];
					} else {
						commonByteArray_TEST_PROJECT_dim_engagement = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TEST_PROJECT_dim_engagement, 0, length);
				strReturn = new String(commonByteArray_TEST_PROJECT_dim_engagement, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TEST_PROJECT_dim_engagement) {

				try {

					int length = 0;

					this._id = readString(dis);

					this.employee_id = readInteger(dis);

					this.department = readString(dis);

					this.engagement = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.salary = null;
					} else {
						this.salary = dis.readDouble();
					}

					this.vacation_days_taken = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this._id, dos);

				// Integer

				writeInteger(this.employee_id, dos);

				// String

				writeString(this.department, dos);

				// Integer

				writeInteger(this.engagement, dos);

				// Double

				if (this.salary == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.salary);
				}

				// Integer

				writeInteger(this.vacation_days_taken, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("_id=" + _id);
			sb.append(",employee_id=" + String.valueOf(employee_id));
			sb.append(",department=" + department);
			sb.append(",engagement=" + String.valueOf(engagement));
			sb.append(",salary=" + String.valueOf(salary));
			sb.append(",vacation_days_taken=" + String.valueOf(vacation_days_taken));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this._id, other._id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tMongoDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tMongoDBInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();

				/**
				 * [tMongoDBOutput_1 begin ] start
				 */

				ok_Hash.put("tMongoDBOutput_1", false);
				start_Hash.put("tMongoDBOutput_1", System.currentTimeMillis());

				currentComponent = "tMongoDBOutput_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row1");
				}

				int tos_count_tMongoDBOutput_1 = 0;

				int nb_line_tMongoDBOutput_1 = 0;

				class DBObjectUtil_tMongoDBOutput_1 {

					private org.bson.Document object = null;

					// Put value to embedded document
					// If have no embedded document, put the value to root document
					public void put(String parentNode, String curentName, Object value) {
						if (parentNode == null || "".equals(parentNode)) {
							object.put(curentName, value);
						} else {
							String objNames[] = parentNode.split("\\.");
							org.bson.Document lastNode = getParentNode(parentNode, objNames.length - 1);
							lastNode.put(curentName, value);
							org.bson.Document parenttNode = null;
							for (int i = objNames.length - 1; i >= 0; i--) {
								parenttNode = getParentNode(parentNode, i - 1);
								parenttNode.put(objNames[i], lastNode);
								lastNode = clone(parenttNode);
							}
							object = lastNode;
						}
					}

					private org.bson.Document clone(org.bson.Document source) {
						org.bson.Document to = new org.bson.Document();
						for (java.util.Map.Entry<String, Object> cur : source.entrySet()) {
							to.append(cur.getKey(), cur.getValue());
						}
						return to;
					}

					// Get node(embedded document) by path configuration
					public org.bson.Document getParentNode(String parentNode, int index) {
						org.bson.Document document = object;
						if (parentNode == null || "".equals(parentNode)) {
							return object;
						} else {
							String objNames[] = parentNode.split("\\.");
							for (int i = 0; i <= index; i++) {
								document = (org.bson.Document) document.get(objNames[i]);
								if (document == null) {
									document = new org.bson.Document();
									return document;
								}
								if (i == index) {
									break;
								}
							}
							return document;
						}
					}

					public void putkeyNode(String parentNode, String curentName, Object value) {
						if (parentNode == null || "".equals(parentNode) || ".".equals(parentNode)) {
							put(parentNode, curentName, value);
						} else {
							put("", parentNode + "." + curentName, value);
						}
					}

					public org.bson.Document getObject() {
						return this.object;
					}

					public void setObject(org.bson.Document object) {
						this.object = object;
					}

				}

				DBObjectUtil_tMongoDBOutput_1 updateObjectUtil_tMongoDBOutput_1 = new DBObjectUtil_tMongoDBOutput_1();
				DBObjectUtil_tMongoDBOutput_1 queryObjectUtil_tMongoDBOutput_1 = new DBObjectUtil_tMongoDBOutput_1();
				java.util.Map<String, String> pathMap_tMongoDBOutput_1 = new java.util.HashMap<String, String>();
				com.mongodb.MongoClient mongo_tMongoDBOutput_1 = null;
				com.mongodb.client.MongoDatabase db_tMongoDBOutput_1 = null;

				pathMap_tMongoDBOutput_1.put("_id", "");

				pathMap_tMongoDBOutput_1.put("employee_id", "");

				pathMap_tMongoDBOutput_1.put("department", "");

				pathMap_tMongoDBOutput_1.put("engagement", "");

				pathMap_tMongoDBOutput_1.put("salary", "");

				pathMap_tMongoDBOutput_1.put("vacation_days_taken", "");

				java.util.logging.Logger.getLogger("org.mongodb.driver").setLevel(java.util.logging.Level.SEVERE);
				// Empty client options
				com.mongodb.MongoClientOptions clientOptions_tMongoDBOutput_1 = new com.mongodb.MongoClientOptions.Builder()
						.build();
				// Empty client credentials list
				java.util.List<com.mongodb.MongoCredential> mongoCredentialList_tMongoDBOutput_1 = new java.util.ArrayList<com.mongodb.MongoCredential>();

				com.mongodb.ServerAddress serverAddress_tMongoDBOutput_1 = new com.mongodb.ServerAddress("localhost",
						27017);
				mongo_tMongoDBOutput_1 = new com.mongodb.MongoClient(serverAddress_tMongoDBOutput_1,
						mongoCredentialList_tMongoDBOutput_1, clientOptions_tMongoDBOutput_1);
				resourceMap.put("mongo_tMongoDBOutput_1", mongo_tMongoDBOutput_1);
				db_tMongoDBOutput_1 = mongo_tMongoDBOutput_1.getDatabase("Datawarehouse");

				com.mongodb.client.MongoCollection<org.bson.Document> coll_tMongoDBOutput_1 = db_tMongoDBOutput_1
						.getCollection("dim_engagement");

				/**
				 * [tMongoDBOutput_1 begin ] stop
				 */

				/**
				 * [tMongoDBInput_1 begin ] start
				 */

				ok_Hash.put("tMongoDBInput_1", false);
				start_Hash.put("tMongoDBInput_1", System.currentTimeMillis());

				currentComponent = "tMongoDBInput_1";

				int tos_count_tMongoDBInput_1 = 0;

				int nb_line_tMongoDBInput_1 = 0;

				com.mongodb.MongoClient mongo_tMongoDBInput_1 = null;
				com.mongodb.client.MongoDatabase db_tMongoDBInput_1 = null;

				java.util.logging.Logger.getLogger("org.mongodb.driver").setLevel(java.util.logging.Level.SEVERE);
				try { // link with the "finally" on the "finally.javajet"

					// Empty client options
					com.mongodb.MongoClientOptions clientOptions_tMongoDBInput_1 = new com.mongodb.MongoClientOptions.Builder()
							.build();
					// Empty client credentials list
					java.util.List<com.mongodb.MongoCredential> mongoCredentialList_tMongoDBInput_1 = new java.util.ArrayList<com.mongodb.MongoCredential>();

					com.mongodb.ServerAddress serverAddress_tMongoDBInput_1 = new com.mongodb.ServerAddress("localhost",
							27017);
					mongo_tMongoDBInput_1 = new com.mongodb.MongoClient(serverAddress_tMongoDBInput_1,
							mongoCredentialList_tMongoDBInput_1, clientOptions_tMongoDBInput_1);
					db_tMongoDBInput_1 = mongo_tMongoDBInput_1.getDatabase("HR-Project");

					com.mongodb.client.MongoCollection<org.bson.Document> coll_tMongoDBInput_1 = db_tMongoDBInput_1
							.getCollection("survey1");

					try {
						// Add warning if an index is not in the query.
						boolean needIndexWarning = true;
						String indexList = "";

						for (com.mongodb.DBObject index : coll_tMongoDBInput_1
								.listIndexes(com.mongodb.DBObject.class)) {

							for (String key : ((com.mongodb.DBObject) index.get("key")).keySet()) {
								// The regexp is:
								// - contain the db DBcolumnName between two backslashed quotes
								// - is followed at some point by a colon
								// - there is no comma between the the DBcolumnName and the colon
								if (("{}").matches(".*" + key + "[^,]*:.*")) {
									// We have an index, do not print error message
									needIndexWarning = false;
								} else {
									// This index is not in the query, add it into the indexList
									indexList += ", " + key;
								}
							}
						}
						if ((!"".equals(indexList)) && (needIndexWarning)) {

							System.err.println("tMongoDBInput_1 - The query does not contain any reference an index.  ["
									+ indexList.substring(1) + " ]");

						}
					} catch (com.mongodb.MongoException e) {
						// caught an exception after issuing the getIndexInfo()
						// don't fail the whole job
						// maybe due to authorization
					}

					org.bson.Document myQuery_tMongoDBInput_1 = org.bson.Document.parse("{}");
					com.mongodb.client.FindIterable<org.bson.Document> fi_tMongoDBInput_1 = coll_tMongoDBInput_1
							.find(myQuery_tMongoDBInput_1).noCursorTimeout(false);

					class DBObjectInputUtil_tMongoDBInput_1 {
						// Get the node value in embedded document,
						// If have no embedded document get root document node.

						public Object getValue(String parentNode, String currentName, org.bson.Document dbObject) {
							Object value = null;
							if (dbObject == null) {
								return null;
							}
							if (parentNode == null || "".equals(parentNode)) {
								if ("*".equals(currentName)) {
									value = dbObject;
								} else if (dbObject.get(currentName) != null) {
									value = dbObject.get(currentName);
								}
							} else {
								String objNames[] = objNames = parentNode.split("\\.");
								org.bson.Document currentObj = dbObject;
								for (int i = 0; i < objNames.length; i++) {
									currentObj = (org.bson.Document) currentObj.get(objNames[i]);
									if (currentObj == null) {
										break;
									}
								}
								if ("*".equals(currentName)) {
									value = currentObj;
								} else if (currentObj != null) {
									value = currentObj.get(currentName);
								}
							}
							return value;
						}
					}
					DBObjectInputUtil_tMongoDBInput_1 dbObjectInputUtil_tMongoDBInput_1 = new DBObjectInputUtil_tMongoDBInput_1();
					java.util.Map<String, String> pathMap_tMongoDBInput_1 = new java.util.HashMap<String, String>();
					pathMap_tMongoDBInput_1.put("_id", "");
					pathMap_tMongoDBInput_1.put("employee_id", "");
					pathMap_tMongoDBInput_1.put("department", "");
					pathMap_tMongoDBInput_1.put("engagement", "");
					pathMap_tMongoDBInput_1.put("salary", "");
					pathMap_tMongoDBInput_1.put("vacation_days_taken", "");

					com.mongodb.client.MongoCursor<org.bson.Document> cursor_tMongoDBInput_1 = fi_tMongoDBInput_1
							.iterator();

					while (cursor_tMongoDBInput_1.hasNext()) {
						org.bson.Document o_tMongoDBInput_1 = cursor_tMongoDBInput_1.next();
						nb_line_tMongoDBInput_1++;
						Object valueObj_tMongoDBInput_1 = null;
						valueObj_tMongoDBInput_1 = dbObjectInputUtil_tMongoDBInput_1
								.getValue(pathMap_tMongoDBInput_1.get("_id"), "_id", o_tMongoDBInput_1);
						if (valueObj_tMongoDBInput_1 != null && valueObj_tMongoDBInput_1.toString().length() > 0) {
							row1._id = valueObj_tMongoDBInput_1.toString();
						} else {
							row1._id = null;
						}
						valueObj_tMongoDBInput_1 = dbObjectInputUtil_tMongoDBInput_1
								.getValue(pathMap_tMongoDBInput_1.get("employee_id"), "employee_id", o_tMongoDBInput_1);
						if (valueObj_tMongoDBInput_1 != null && valueObj_tMongoDBInput_1.toString().length() > 0) {
							if (valueObj_tMongoDBInput_1.getClass().equals(Double.class)) {
								row1.employee_id = ParserUtils.parseTo_Double(valueObj_tMongoDBInput_1.toString())
										.intValue();
							} else {
								row1.employee_id = ParserUtils.parseTo_Integer(valueObj_tMongoDBInput_1.toString());
							}
						} else {
							row1.employee_id = null;
						}
						valueObj_tMongoDBInput_1 = dbObjectInputUtil_tMongoDBInput_1
								.getValue(pathMap_tMongoDBInput_1.get("department"), "department", o_tMongoDBInput_1);
						if (valueObj_tMongoDBInput_1 != null && valueObj_tMongoDBInput_1.toString().length() > 0) {
							row1.department = valueObj_tMongoDBInput_1.toString();
						} else {
							row1.department = null;
						}
						valueObj_tMongoDBInput_1 = dbObjectInputUtil_tMongoDBInput_1
								.getValue(pathMap_tMongoDBInput_1.get("engagement"), "engagement", o_tMongoDBInput_1);
						if (valueObj_tMongoDBInput_1 != null && valueObj_tMongoDBInput_1.toString().length() > 0) {
							if (valueObj_tMongoDBInput_1.getClass().equals(Double.class)) {
								row1.engagement = ParserUtils.parseTo_Double(valueObj_tMongoDBInput_1.toString())
										.intValue();
							} else {
								row1.engagement = ParserUtils.parseTo_Integer(valueObj_tMongoDBInput_1.toString());
							}
						} else {
							row1.engagement = null;
						}
						valueObj_tMongoDBInput_1 = dbObjectInputUtil_tMongoDBInput_1
								.getValue(pathMap_tMongoDBInput_1.get("salary"), "salary", o_tMongoDBInput_1);
						if (valueObj_tMongoDBInput_1 != null && valueObj_tMongoDBInput_1.toString().length() > 0) {
							row1.salary = ParserUtils.parseTo_Double(valueObj_tMongoDBInput_1.toString());
						} else {
							row1.salary = null;
						}
						valueObj_tMongoDBInput_1 = dbObjectInputUtil_tMongoDBInput_1.getValue(
								pathMap_tMongoDBInput_1.get("vacation_days_taken"), "vacation_days_taken",
								o_tMongoDBInput_1);
						if (valueObj_tMongoDBInput_1 != null && valueObj_tMongoDBInput_1.toString().length() > 0) {
							if (valueObj_tMongoDBInput_1.getClass().equals(Double.class)) {
								row1.vacation_days_taken = ParserUtils
										.parseTo_Double(valueObj_tMongoDBInput_1.toString()).intValue();
							} else {
								row1.vacation_days_taken = ParserUtils
										.parseTo_Integer(valueObj_tMongoDBInput_1.toString());
							}
						} else {
							row1.vacation_days_taken = null;
						}

						/**
						 * [tMongoDBInput_1 begin ] stop
						 */

						/**
						 * [tMongoDBInput_1 main ] start
						 */

						currentComponent = "tMongoDBInput_1";

						tos_count_tMongoDBInput_1++;

						/**
						 * [tMongoDBInput_1 main ] stop
						 */

						/**
						 * [tMongoDBInput_1 process_data_begin ] start
						 */

						currentComponent = "tMongoDBInput_1";

						/**
						 * [tMongoDBInput_1 process_data_begin ] stop
						 */

						/**
						 * [tMongoDBOutput_1 main ] start
						 */

						currentComponent = "tMongoDBOutput_1";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "row1");
						}

						try {
							updateObjectUtil_tMongoDBOutput_1.setObject(new org.bson.Document());

							updateObjectUtil_tMongoDBOutput_1.put(pathMap_tMongoDBOutput_1.get("_id"), "_id", row1._id);
							updateObjectUtil_tMongoDBOutput_1.put(pathMap_tMongoDBOutput_1.get("employee_id"),
									"employee_id", row1.employee_id);
							updateObjectUtil_tMongoDBOutput_1.put(pathMap_tMongoDBOutput_1.get("department"),
									"department", row1.department);
							updateObjectUtil_tMongoDBOutput_1.put(pathMap_tMongoDBOutput_1.get("engagement"),
									"engagement", row1.engagement);
							updateObjectUtil_tMongoDBOutput_1.put(pathMap_tMongoDBOutput_1.get("salary"), "salary",
									row1.salary);
							updateObjectUtil_tMongoDBOutput_1.put(pathMap_tMongoDBOutput_1.get("vacation_days_taken"),
									"vacation_days_taken", row1.vacation_days_taken);
							org.bson.Document updateObj_tMongoDBOutput_1 = updateObjectUtil_tMongoDBOutput_1
									.getObject();

							coll_tMongoDBOutput_1.insertOne(updateObj_tMongoDBOutput_1);

						} catch (Exception e_tMongoDBOutput_1) {

							System.err.println(e_tMongoDBOutput_1.getMessage());

						}
						nb_line_tMongoDBOutput_1++;

						tos_count_tMongoDBOutput_1++;

						/**
						 * [tMongoDBOutput_1 main ] stop
						 */

						/**
						 * [tMongoDBOutput_1 process_data_begin ] start
						 */

						currentComponent = "tMongoDBOutput_1";

						/**
						 * [tMongoDBOutput_1 process_data_begin ] stop
						 */

						/**
						 * [tMongoDBOutput_1 process_data_end ] start
						 */

						currentComponent = "tMongoDBOutput_1";

						/**
						 * [tMongoDBOutput_1 process_data_end ] stop
						 */

						/**
						 * [tMongoDBInput_1 process_data_end ] start
						 */

						currentComponent = "tMongoDBInput_1";

						/**
						 * [tMongoDBInput_1 process_data_end ] stop
						 */

						/**
						 * [tMongoDBInput_1 end ] start
						 */

						currentComponent = "tMongoDBInput_1";

					}

				} finally {
					if (mongo_tMongoDBInput_1 != null) {

						mongo_tMongoDBInput_1.close();

					}
				}

				globalMap.put("tMongoDBInput_1_NB_LINE", nb_line_tMongoDBInput_1);

				ok_Hash.put("tMongoDBInput_1", true);
				end_Hash.put("tMongoDBInput_1", System.currentTimeMillis());

				/**
				 * [tMongoDBInput_1 end ] stop
				 */

				/**
				 * [tMongoDBOutput_1 end ] start
				 */

				currentComponent = "tMongoDBOutput_1";

				if (mongo_tMongoDBOutput_1 != null) {

					mongo_tMongoDBOutput_1.close();

				}
				resourceMap.put("finish_tMongoDBOutput_1", true);

				globalMap.put("tMongoDBOutput_1_NB_LINE", nb_line_tMongoDBOutput_1);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row1");
				}

				ok_Hash.put("tMongoDBOutput_1", true);
				end_Hash.put("tMongoDBOutput_1", System.currentTimeMillis());

				/**
				 * [tMongoDBOutput_1 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tMongoDBInput_1 finally ] start
				 */

				currentComponent = "tMongoDBInput_1";

				/**
				 * [tMongoDBInput_1 finally ] stop
				 */

				/**
				 * [tMongoDBOutput_1 finally ] start
				 */

				currentComponent = "tMongoDBOutput_1";

				if (resourceMap.get("finish_tMongoDBOutput_1") == null) {
					if (resourceMap.get("mongo_tMongoDBOutput_1") != null) {

						((com.mongodb.MongoClient) resourceMap.get("mongo_tMongoDBOutput_1")).close();

					}
				}

				/**
				 * [tMongoDBOutput_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tMongoDBInput_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final dim_engagement dim_engagementClass = new dim_engagement();

		int exitCode = dim_engagementClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}
		enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket can't open
				System.err.println("The statistics socket port " + portStats + " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = dim_engagement.class.getClassLoader()
					.getResourceAsStream("test_project/dim_engagement_0_1/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = dim_engagement.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				if (context != null && context.isEmpty()) {
					defaultProps.load(inContext);
					context = new ContextProperties(defaultProps);
				}

				inContext.close();
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tMongoDBInput_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tMongoDBInput_1) {
			globalMap.put("tMongoDBInput_1_SUBPROCESS_STATE", -1);

			e_tMongoDBInput_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println(
					(endUsedMemory - startUsedMemory) + " bytes memory increase when running : dim_engagement");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {// for trunjob call
			final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 48667 characters generated by Talend Open Studio for Big Data on the April
 * 20, 2020 5:55:14 PM WET
 ************************************************************************************************/